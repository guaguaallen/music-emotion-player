{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\96326\\\\.cursor-tutor\\\\music\\\\src\\\\components\\\\MusicPlayer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport EmotionDetector from './EmotionDetector';\n\n// ... 其他导入 ...\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sampleTracks = [{\n  id: '1',\n  title: 'Happy Song',\n  artist: 'Artist 1',\n  url: '/path/to/happy-song.mp3',\n  mood: 'upbeat'\n}, {\n  id: '2',\n  title: 'Sad Melody',\n  artist: 'Artist 2',\n  url: '/path/to/sad-melody.mp3',\n  mood: 'melancholic'\n}, {\n  id: '3',\n  title: 'Angry Rock',\n  artist: 'Artist 3',\n  url: '/path/to/angry-rock.mp3',\n  mood: 'intense'\n}, {\n  id: '4',\n  title: 'Calm Jazz',\n  artist: 'Artist 4',\n  url: '/path/to/calm-jazz.mp3',\n  mood: 'neutral'\n}];\nconst MusicPlayer = () => {\n  _s();\n  // ... 现有的状态变量 ...\n  const [currentEmotion, setCurrentEmotion] = useState('');\n\n  // ... 现有的useEffect和其他函数 ...\n\n  const handleEmotionDetected = emotion => {\n    console.log(`Detected emotion: ${emotion}`);\n    setCurrentEmotion(emotion);\n    // 根据检测到的情绪选择合适的歌曲\n    const emotionPlaylist = getEmotionPlaylist(emotion);\n    if (emotionPlaylist.length > 0) {\n      setCurrentTrack(emotionPlaylist[0]);\n      playTrack(emotionPlaylist[0]);\n    }\n  };\n  const getEmotionPlaylist = emotion => {\n    // 这里您需要实现一个函数来根据情绪返回合适的歌曲列表\n    // 这只是一个示例实现\n    switch (emotion) {\n      case 'happy':\n        return tracks.filter(track => track.mood === 'upbeat');\n      case 'sad':\n        return tracks.filter(track => track.mood === 'melancholic');\n      case 'angry':\n        return tracks.filter(track => track.mood === 'intense');\n      case 'neutral':\n      default:\n        return tracks;\n    }\n  };\n\n  // 在 MusicPlayer 组件内部添加以下状态\n  const [tracks, setTracks] = useState(sampleTracks);\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const playTrack = track => {\n    console.log(`Playing: ${track.title} by ${track.artist}`);\n    // 这里后续可以添加实际播放音乐的逻辑\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(EmotionDetector, {\n      onEmotionDetected: handleEmotionDetected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Music Player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Emotion: \", currentEmotion]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), currentTrack && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Now Playing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [currentTrack.title, \" by \", currentTrack.artist]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Mood: \", currentTrack.mood]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tracks.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => playTrack(track),\n        children: [track.title, \" - \", track.artist, \" (\", track.mood, \")\"]\n      }, track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicPlayer, \"R253xyl0FdyvIx0WKseLuxWzxVA=\");\n_c = MusicPlayer;\nexport default MusicPlayer;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"names":["React","useState","EmotionDetector","jsxDEV","_jsxDEV","sampleTracks","id","title","artist","url","mood","MusicPlayer","_s","currentEmotion","setCurrentEmotion","handleEmotionDetected","emotion","console","log","emotionPlaylist","getEmotionPlaylist","length","setCurrentTrack","playTrack","tracks","filter","track","setTracks","currentTrack","children","onEmotionDetected","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/96326/.cursor-tutor/music/src/components/MusicPlayer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport EmotionDetector from './EmotionDetector';\r\n\r\n// ... 其他导入 ...\r\n\r\ninterface Track {\r\n  id: string;\r\n  title: string;\r\n  artist: string;\r\n  url: string;\r\n  mood: 'upbeat' | 'melancholic' | 'intense' | 'neutral';\r\n}\r\n\r\nconst sampleTracks: Track[] = [\r\n  { id: '1', title: 'Happy Song', artist: 'Artist 1', url: '/path/to/happy-song.mp3', mood: 'upbeat' },\r\n  { id: '2', title: 'Sad Melody', artist: 'Artist 2', url: '/path/to/sad-melody.mp3', mood: 'melancholic' },\r\n  { id: '3', title: 'Angry Rock', artist: 'Artist 3', url: '/path/to/angry-rock.mp3', mood: 'intense' },\r\n  { id: '4', title: 'Calm Jazz', artist: 'Artist 4', url: '/path/to/calm-jazz.mp3', mood: 'neutral' },\r\n];\r\n\r\nconst MusicPlayer: React.FC = () => {\r\n  // ... 现有的状态变量 ...\r\n  const [currentEmotion, setCurrentEmotion] = useState<string>('');\r\n\r\n  // ... 现有的useEffect和其他函数 ...\r\n\r\n  const handleEmotionDetected = (emotion: string) => {\r\n    console.log(`Detected emotion: ${emotion}`);\r\n    setCurrentEmotion(emotion);\r\n    // 根据检测到的情绪选择合适的歌曲\r\n    const emotionPlaylist = getEmotionPlaylist(emotion);\r\n    if (emotionPlaylist.length > 0) {\r\n      setCurrentTrack(emotionPlaylist[0]);\r\n      playTrack(emotionPlaylist[0]);\r\n    }\r\n  };\r\n\r\n  const getEmotionPlaylist = (emotion: string) => {\r\n    // 这里您需要实现一个函数来根据情绪返回合适的歌曲列表\r\n    // 这只是一个示例实现\r\n    switch (emotion) {\r\n      case 'happy':\r\n        return tracks.filter(track => track.mood === 'upbeat');\r\n      case 'sad':\r\n        return tracks.filter(track => track.mood === 'melancholic');\r\n      case 'angry':\r\n        return tracks.filter(track => track.mood === 'intense');\r\n      case 'neutral':\r\n      default:\r\n        return tracks;\r\n    }\r\n  };\r\n\r\n  // 在 MusicPlayer 组件内部添加以下状态\r\n  const [tracks, setTracks] = useState<Track[]>(sampleTracks);\r\n  const [currentTrack, setCurrentTrack] = useState<Track | null>(null);\r\n\r\n  const playTrack = (track: Track) => {\r\n    console.log(`Playing: ${track.title} by ${track.artist}`);\r\n    // 这里后续可以添加实际播放音乐的逻辑\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <EmotionDetector onEmotionDetected={handleEmotionDetected} />\r\n      <h2>Music Player</h2>\r\n      <p>Current Emotion: {currentEmotion}</p>\r\n      {currentTrack && (\r\n        <div>\r\n          <h3>Now Playing</h3>\r\n          <p>{currentTrack.title} by {currentTrack.artist}</p>\r\n          <p>Mood: {currentTrack.mood}</p>\r\n        </div>\r\n      )}\r\n      <h3>Playlist</h3>\r\n      <ul>\r\n        {tracks.map(track => (\r\n          <li key={track.id} onClick={() => playTrack(track)}>\r\n            {track.title} - {track.artist} ({track.mood})\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MusicPlayer;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}